const fs = require('node:fs')
const Path = require('node:path')
const loadConfig = require('tailwindcss/loadConfig.js')
const resolveConfig = require('tailwindcss/resolveConfig.js')
const { createSyncFn } = require('synckit')

// Tailwind's PostCSS plugin is async, which means our babel plugin needs to be async too.
// Babel can't run async plugins when it's called synchronously, which is the case with Expo.
// So we use synckit as a workaround to run tailwind synchronously.
const runTailwindSync = createSyncFn(require.resolve('./tailwind.worker.cjs'))

const configPaths = [
  './tailwind.config.js',
  './tailwind.config.cjs',
  './tailwind.config.mjs',
  './tailwind.config.ts',
  './tailwind.config.cts',
  './tailwind.config.mts',
]

function resolveConfigPath(customPath) {
  const paths = customPath ? [customPath] : configPaths
  for (const path of paths) {
    try {
      const resolvedPath = Path.resolve(path)
      fs.accessSync(resolvedPath)
      return resolvedPath
    } catch (err) {}
  }
}

function loadTailwindConfig(path) {
  const resolvedPath = resolveConfigPath(path)
  return loadConfig(resolvedPath)
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}|\\)([\]]/g, '\\$&')
}

function kebabToCamelCase(str) {
  return str.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
}

/**
 * Parses the CSS generated by Tailwind and returns mappings for the plugin.
 *
 * @example
 * ```css
 * .bg-red-500 { background-color: #f00 }
 * ```
 * â†’
 * ```js
 * { "bg-red-500": () => ({ backgroundColor: "'#f00'" }) }
 * ```
 *
 * @param {string} css - The CSS to parse.
 * @param {boolean} includeVariables - Whether to include properties that contain CSS variables.
 * @returns {Object} Mappings for the plugin.
 */
function tailwindCssToMappings(css, includeVariables = false) {
  const classAndPropertiesRegExp = /(?:^|\n)\s*\.([^\s]+)\s+{\n(\s*[a-z0-9-_]+:\s*[^\n]+)+\s*}/gi
  const mappings = {}
  let matches

  // biome-ignore lint/suspicious/noAssignInExpressions:
  while ((matches = classAndPropertiesRegExp.exec(css)) !== null) {
    const className = matches[1]?.trim()
    const properties = matches[2]?.trim()

    if (!className || !properties) continue

    const propertyMap = {}
    let isValid = true
    for (const line of properties.split('\n')) {
      const [key, ...valueParts] = line.split(':')
      const value = valueParts.join(':').trim()
      if (
        key.startsWith('-') || // Prefixed and custom properties
        (!includeVariables && (value.includes('--') || value.includes('var('))) // CSS variables in values
      ) {
        isValid = false
        break
      }
      const normalizedKey = kebabToCamelCase(key.trim())
      const normalizedValue = Number.isNaN(Number(value)) ? `'${value}'` : Number(value)
      propertyMap[normalizedKey] = normalizedValue
    }

    if (!isValid) continue

    // When CSS is generated, some characters in selectors are escaped (e.g. `.foo\\.bar`),
    // so we remove the backslashes (to get `.foo.bar`).
    const normalizedClassName = className.replaceAll('\\', '')
    mappings[normalizedClassName] = () => propertyMap
  }

  return mappings
}

function getOptionsForTailwindConfig(tailwindConfigOrPath, includeCssVariables = false) {
  const twConfig =
    typeof tailwindConfigOrPath === 'string' || !tailwindConfigOrPath
      ? loadTailwindConfig(tailwindConfigOrPath)
      : tailwindConfigOrPath

  if (!twConfig) {
    throw new Error(`Unable to load tailwind config ${tailwindConfigOrPath}`)
  }

  const resolvedTwConfig = resolveConfig(twConfig)
  const twConfigWithTokens = resolvedTwConfig.transformClassnamesTheme
    ? { ...resolvedTwConfig, theme: resolvedTwConfig.transformClassnamesTheme }
    : resolvedTwConfig
  const css = runTailwindSync(twConfigWithTokens, '@tailwind utilities;')
  const mappings = tailwindCssToMappings(css, includeCssVariables)
  const content = twConfig.content?.files ?? twConfig.content
  const include = Array.isArray(content) ? content.filter((f) => typeof f === 'string') : undefined
  return { mappings, include }
}

module.exports = {
  loadTailwindConfig,
  getOptionsForTailwindConfig,
  escapeRegExp,
}
